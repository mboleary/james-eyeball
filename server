#!/usr/bin/env python3
import time

# from adafruit_servokit import ServoKit
import socket
import cryptography
import cryptography.fernet
import json

# kit = ServoKit(channels=16)

KEY = "KM0ZRVIljWKiBLy293Al4Qm1VqbLF2at4gxLfoqtT7o="
HOST = "0.0.0.0"
PORT = 65123
PANSERVO = 1
TILTSERVO = 0

f = cryptography.fernet.Fernet(KEY)

# kit.servo[PANSERVO].angle = 100
# kit.servo[TILTSERVO].angle = 100

global lasterror
lasterror = ""


def status():
    return json.dumps(
        {
            #    "pan": kit.servo[PANSERVO].angle,
            #    "tilt": kit.servo[TILTSERVO].angle,
            "error": lasterror
        }
    )


def handler(msg):
    global lasterror
    print("got message of length {}".format(len(msg)))

    try:
        msg = f.decrypt(msg).decode("ascii").strip()
    except Exception as e:
        print("failed to decrypt message")
        lasterror = str(e)
        return status()

    print("decrypted message: {}".format(msg))

    if msg == "status":
        return status()

    elif len(msg.split()) == 2:
        cmd = msg.split()[0].strip()
        arg = msg.split()[1].strip()
        print("cmd='{}', arg='{}'".format(cmd, arg))
        try:
            arg = int(arg)
        except Exception as e:
            print("failed to decode argument: {}".format(e))
            lasterror = str(e)
            return status()

        try:
            if cmd == "left":
                # kit.servo[PANSERVO].angle = kit.servo[PANSERVO].angle + arg
                print("left")

            elif cmd == "right":
                # kit.servo[PANSERVO].angle = kit.servo[PANSERVO].angle - arg
                print("right")

            elif cmd == "up":
                # if kit.servo[TILTSERVO].angle  > 75:
                #    kit.servo[TILTSERVO].angle = kit.servo[TILTSERVO].angle - arg
                # else:
                #    kit.servo[TILTSERVO].angle = 75
                print("up")

            elif cmd == "down":
                # kit.servo[TILTSERVO].angle = kit.servo[TILTSERVO].angle + arg
                print("down")
        except Exception as e:
            lasterror = str(e)
            print("failed to run command: {}".format(e))

        return status()

    else:
        return f.encrypt(
            "don't know how to handle your command '{}'".format(msg).encode("ascii")
        )


with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
    s.bind((HOST, PORT))
    data = []
    while True:
        d, a = s.recvfrom(1024)
        data.append(d)
        msg = handler(b"".join(data))
        s.sendto(f.encrypt(msg.encode("ascii")), a)
        data.clear()
