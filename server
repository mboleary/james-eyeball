#!/usr/bin/env python3
import time

import socket
import cryptography
import cryptography.fernet
import json
import sys
import hashlib
import requests

if len(sys.argv) != 4:
    print("Usage: {} <HOST> <PORT> <KEY>".format(sys.argv[0]))
    exit(1)

HOST = sys.argv[1]
PORT = int(sys.argv[2])
KEY = sys.argv[3]

f = cryptography.fernet.Fernet(KEY)

global lasterror
lasterror = ""

CAM_IP = "172.31.1.155"
CAM_USERNAME = "admin"
CAM_PASSWD = ""
CAM_NC = "00000002"
CAM_CNONCE = "e16226f667ebc0c4"
CAM_REALM = "DCS-5222LB1"

global CAM_AUTH_RESP
CAM_AUTH_RESP = ""

def digestHeader2Dict(header = ""):
    headerDict = {}
    if header.find("Digest") >= 0:
        split = header.replace("Digest", "").split(",")
        for s in split:
            split2 = s.strip(" ").split("=")
            headerDict[split2[0]] = split2[1].strip("\"")
    return headerDict

def digestGetAuthHeader(nonce):
    uri = "/index.htm"
    qop = "auth"
    ha1 = hashlib.md5(f'{CAM_USERNAME}:{CAM_REALM}:'.encode('utf-8'))
    ha2 = hashlib.md5(f'GET:{uri}'.encode('utf-8'))
    rsp = hashlib.md5(f'{ha1.hexdigest()}:{nonce}:{CAM_NC}:{CAM_CNONCE}:{qop}:{ha2.hexdigest()}'.encode('utf-8'))
    
    return f' Digest username="{CAM_USERNAME}", realm="{CAM_REALM}", nonce="{nonce}", uri="{uri}", algorithm=MD5, response="{rsp.hexdigest()}", qop={qop}, nc={CAM_NC}, cnonce="{CAM_CNONCE}"'

# Logs into the camera
def cam_login():
    r = requests.get("http://" + CAM_IP + "/index.htm")
    print(r.status_code)

    # Check for authentication
    if r.status_code == 401:
        wwwHeader = r.headers['WWW-Authenticate']
        wwwDict = digestHeader2Dict(wwwHeader)
        authHeaderContent = digestGetAuthHeader(wwwDict['nonce'])
        print(authHeaderContent)
    pass

cam_login()

def status():
    return json.dumps({"error": lasterror})


def handler(msg):
    global lasterror
    print("got message of length {}".format(len(msg)))

    try:
        msg = f.decrypt(msg).decode("ascii").strip()
    except Exception as e:
        print("failed to decrypt message")
        lasterror = str(e)
        return status()

    print("decrypted message: {}".format(msg))

    if msg == "status":
        return status()

    elif len(msg.split()) == 2:
        cmd = msg.split()[0].strip()
        arg = msg.split()[1].strip()
        print("cmd='{}', arg='{}'".format(cmd, arg))
        try:
            arg = int(arg)
        except Exception as e:
            print("failed to decode argument: {}".format(e))
            lasterror = str(e)
            return status()

        try:
            if cmd == "left":
                print("left")

            elif cmd == "right":
                print("right")

            elif cmd == "up":
                print("up")

            elif cmd == "down":
                print("down")
        except Exception as e:
            lasterror = str(e)
            print("failed to run command: {}".format(e))

        return status()

    else:
        return f.encrypt(
            "don't know how to handle your command '{}'".format(msg).encode("ascii")
        )


with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
    s.bind((HOST, PORT))
    data = []
    while True:
        d, a = s.recvfrom(1024)
        data.append(d)
        msg = handler(b"".join(data))
        s.sendto(f.encrypt(msg.encode("ascii")), a)
        data.clear()
