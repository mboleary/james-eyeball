#!/usr/bin/env python3
import time

import socket
import cryptography
import cryptography.fernet
import json
import sys
import hashlib
import requests
from requests.auth import HTTPDigestAuth

if len(sys.argv) < 6:
    print(
        "Usage: {} <HOST> <PORT> <KEY> <CAMERA_IP> <CAMERA_USER> <CAMERA_PASSWORD>".format(
            sys.argv[0]
        )
    )
    exit(1)

HOST = sys.argv[1]
PORT = int(sys.argv[2])
KEY = sys.argv[3]
CAM_IP = sys.argv[4]
CAM_USERNAME = sys.argv[5]

if len(sys.argv) == 6:
    CAM_PASSWD = ""
else:
    CAM_PASSWD = sys.argv[6]

f = cryptography.fernet.Fernet(KEY)

global lasterror
lasterror = ""


def moveCam(direction, amount):
    print("moving:", direction, amount)
    r = requests.get(
        "http://"
        + CAM_IP
        + f"/cgi-bin/longcctvmove.cgi?action=move&direction={direction}&panstep={amount}&tiltstep={amount}",
        auth=HTTPDigestAuth(CAM_USERNAME, CAM_PASSWD),
    )
    print(r.status_code, r.content)


def handler(msg):
    global lasterror
    print("got message of length {}".format(len(msg)))

    try:
        msg = f.decrypt(msg).decode("ascii").strip()
    except Exception as e:
        print("failed to decrypt message")
        lasterror = str(e)

    print("decrypted message: {}".format(msg))

    if len(msg.split()) == 2:
        cmd = msg.split()[0].strip()
        arg = msg.split()[1].strip()
        print("cmd='{}', arg='{}'".format(cmd, arg))
        try:
            arg = int(arg)
        except Exception as e:
            print("failed to decode argument: {}".format(e))
            lasterror = str(e)

        try:
            moveCam(cmd, arg)
        except Exception as e:
            lasterror = str(e)
            print("failed to run command: {}".format(e))

        return

    else:
        return f.encrypt(
            "don't know how to handle your command '{}'".format(msg).encode("ascii")
        )


with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
    s.bind((HOST, PORT))
    data = []
    while True:
        d, a = s.recvfrom(1024)
        data.append(d)
        msg = handler(b"".join(data))
        s.sendto(f.encrypt("".encode("ascii")), a)
        data.clear()
